#!/usr/bin/env python3

from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler
from base64 import b64decode
from binascii import Error as BinasciiError
from subprocess import run

def check_password(username, password):
    proc = run([
        'smbclient',
        '-U', username,
        '--password', password,
        '-L',
        '\\127.0.0.1',
    ])
    return proc.returncode == 0

def check_auth_header(auth_header):
    if not auth_header:
        return False

    if auth_header[:6].lower() != "basic ":
        return False

    auth_header = auth_header[6:].strip()
    if not auth_header:
        return False

    try:
        auth_header = b64decode(auth_header)
        if not auth_header:
            return False
    except BinasciiError:
        return False

    auth_split = auth_header.split(b':', 1)
    if len(auth_split) != 2:
        return False
    [username, password] = auth_split

    return check_password(username, password)

class AuthHTTPRequestHandler(BaseHTTPRequestHandler):
    def __init__(self, request, client_address, server) -> None:
        super().__init__(request, client_address, server)

    def do_GET(self):
        auth_header = self.headers.get("Authorization")
        if check_auth_header(auth_header):
            self.send_response(200, 'OK')
        else:
            self.send_response(401, 'Authentication required')
            self.send_header('WWW-Authenticate', 'Basic realm="FoxDen NAS"')
        self.end_headers()


srv = ThreadingHTTPServer(("127.0.0.1", 1042), AuthHTTPRequestHandler)
print("HTTP server listening!")
srv.serve_forever()
